import 'dart:convert';
import 'dart:typed_data';

import 'package:crystals_pqc/crystals_pqc.dart';

void main() {

  // Instantiate Kyber KEM.
  var kyber = Kyber.kem512();

  // Define a key generation seed.
  var seed = Uint8List.fromList([
    0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
    0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
    0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
    0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
  ]);

  // Generate keys from seed.
  var (pk, sk) = kyber.generateKeys(seed);

  // Define a KEM nonce.
  var nonce = Uint8List.fromList([
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
  ]);

  // Encapsulate nonce and retrieve cipher and shared key.
  var (cipher, sharedKey1) = kyber.encapsulate(pk, nonce);

  // Or decapsulate the cipher and retrieve the shared key.
  var sharedKey2 = kyber.decapsulate(cipher, sk);


  print("Encapsulated shared key: \n${base64Encode(sharedKey1)}\n");
  print("Decapsulated shared key: \n${base64Encode(sharedKey2)}\n");
}
